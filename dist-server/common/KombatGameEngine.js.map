{"version":3,"sources":["../../src/common/KombatGameEngine.js"],"names":["KombatGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","autoResolve","on","stepInfo","postStep","e","handleCollision","Object","assign","foodRadius","headRadius","bodyRadius","eyeDist","eyeRadius","eyeAngle","spaceWidth","spaceHeight","moveDist","foodCount","eatDistance","startBodyLength","aiCount","directionStop","collideDistance","serializer","registerClass","Kombat","Bullet","Granade","Wall","Blood","Explosion2","x","Math","random","y","TwoVector","inputData","playerId","player","world","queryObject","speed","input","right","left","up","down","velocity","move_angle","atan2","cos","sin","direction","angle","step","last_shot","emit","throw_power","o1","o2","handleBulletHit","destroyObjectById","id","kombat","bullet","health","blood","position","clone","addObjectToWorld","timer","add","objects","removeObjectFromWorld","kombats","queryObjects","instanceType","forEach","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\r\nimport Kombat from './Kombat';\r\nimport Wall from './Wall';\r\nimport Bullet from './Bullet';\r\nimport Granade from './Granade';\r\nimport Blood from './Blood';\r\nimport Explosion2 from './Explosion2';\r\n\r\nexport default class KombatGameEngine extends GameEngine {\r\n\r\n    constructor(options) {\r\n        super(options);\r\n        this.physicsEngine = new SimplePhysicsEngine({\r\n            gameEngine: this,\r\n            collisions: {\r\n                autoResolve: true,\r\n            }\r\n        });\r\n     \r\n        this.on('postStep', (stepInfo) => this.postStep(stepInfo));\r\n        this.on('collisionStart', (e) => this.handleCollision(e));\r\n\r\n        // game variables\r\n        Object.assign(this, {\r\n            foodRadius: 0.1, \r\n            headRadius: 0.25, \r\n            bodyRadius: 0.1,\r\n            eyeDist: 0.08, \r\n            eyeRadius: 0.03, \r\n            eyeAngle: 0.5,\r\n            spaceWidth: 16, \r\n            spaceHeight: 9,\r\n            moveDist: 0.06,\r\n            foodCount: 16, \r\n            eatDistance: 0.3, \r\n            startBodyLength: 10, \r\n            aiCount: 3, \r\n            directionStop: 100,\r\n            collideDistance: 1\r\n        });\r\n    }\r\n\r\n    registerClasses(serializer) {\r\n        serializer.registerClass(Kombat);\r\n        serializer.registerClass(Bullet);\r\n        serializer.registerClass(Granade);\r\n        serializer.registerClass(Wall);\r\n        serializer.registerClass(Blood);\r\n        serializer.registerClass(Explosion2);\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n    }\r\n\r\n    randPos() {\r\n        let x = (Math.random() - 0.5) * this.spaceWidth;\r\n        let y = (Math.random() - 0.5) * this.spaceHeight;\r\n        return new TwoVector(x, y);\r\n    }\r\n\r\n    processInput(inputData, playerId) {\r\n        super.processInput(inputData, playerId);\r\n        let player = this.world.queryObject({ playerId });\r\n        let speed = 0.24;\r\n        if (player) {\r\n            if (inputData.input === 'step') {\r\n                let x = 0;\r\n                let y = 0;\r\n                if(inputData.options.right){\r\n                    x++;\r\n                }\r\n                if(inputData.options.left){\r\n                    x--;\r\n                }\r\n                if(inputData.options.up){\r\n                    y--;\r\n                }\r\n                if(inputData.options.down){\r\n                    y++;\r\n                }\r\n                if(x == 0 && y === 0){\r\n                    player.velocity.x = 0;\r\n                    player.velocity.y = 0;\r\n                }\r\n                else{\r\n                    let move_angle = Math.atan2(y, x);\r\n                    player.velocity.x = speed * Math.cos(move_angle);\r\n                    player.velocity.y = speed * Math.sin(move_angle);\r\n                }\r\n                \r\n                player.direction =  inputData.options.angle;\r\n            }\r\n            else if (inputData.input === 'shoot'){\r\n                let step = inputData.step;\r\n                if(step  >= player.last_shot + 15){\r\n                    player.last_shot = step;\r\n                    this.emit('shoot', player);\r\n                }\r\n                \r\n            }\r\n            else if (inputData.input === 'throw_power'){\r\n                player.throw_power = .015;\r\n            }\r\n            else if (inputData.input === 'granade'){\r\n                this.emit('granade', player);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleCollision(e){\r\n        if(e.o1 instanceof Kombat){\r\n            if(e.o2 instanceof Bullet){\r\n                this.handleBulletHit(e.o1, e.o2)\r\n            }\r\n        }\r\n        else if(e.o1 instanceof Bullet){\r\n            if(e.o2 instanceof Kombat){\r\n                this.handleBulletHit(e.o2, e.o1)\r\n            }\r\n            else if( e.o2 instanceof Wall){\r\n                this.destroyObjectById(e.o1.id);\r\n            }\r\n        }\r\n        else if(e.o1 instanceof Wall){\r\n            if(e.o2 instanceof Bullet){\r\n                this.destroyObjectById(e.o2.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleBulletHit(kombat, bullet){\r\n        this.destroyObjectById(bullet.id);\r\n        kombat.health--;\r\n        let blood = new Blood(this, null, { position: kombat.position.clone() });\r\n        this.addObjectToWorld(blood);\r\n        this.timer.add(600, this.destroyObjectById, this, [blood.id]);\r\n        if(kombat.health <= 0){\r\n            this.destroyObjectById(kombat.id);\r\n        }\r\n    }\r\n\r\n    destroyObjectById(id){\r\n        if (this.world.objects[id]) {\r\n            this.removeObjectFromWorld(id);\r\n        }   \r\n    }\r\n\r\n    postStep(stepInfo){\r\n        let kombats = this.world.queryObjects({ instanceType : Kombat });\r\n        kombats.forEach(kombat => {\r\n            if(kombat.throw_power > 0){\r\n                kombat.throw_power += .015\r\n                if(kombat.throw_power  > 1){\r\n                    kombat.throw_power = 1\r\n                }\r\n            }\r\n        });\r\n    }\r\n}"],"file":"KombatGameEngine.js"}