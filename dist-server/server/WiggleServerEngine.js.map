{"version":3,"sources":["../../src/server/WiggleServerEngine.js"],"names":["WiggleServerEngine","io","gameEngine","inputOptions","on","stepLogic","bind","shoot","f","foodCount","newF","Food","position","randPos","addObjectToWorld","socket","player","Wiggle","direction","bodyLength","startBodyLength","playerId","socketId","playerWiggle","world","queryObject","removeObjectFromWorld","id","w","objects","w1","w2","AI","addAI","bullet","Bullet","clone","velocity","TwoVector","Math","cos","sin","wiggles","queryObjects","instanceType","foodObjects","i","bodyParts","length","distance","subtract","collideDistance","wiggleHitWiggle","ServerEngine"],"mappings":"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","sourcesContent":["import { ServerEngine, TwoVector } from 'lance-gg';\r\nimport Wiggle from '../common/Wiggle';\r\nimport Food from '../common/Food';\r\nimport Bullet from '../common/Bullet';\r\n\r\nexport default class WiggleServerEngine extends ServerEngine {\r\n\r\n    constructor(io, gameEngine, inputOptions) {\r\n        super(io, gameEngine, inputOptions);\r\n        this.gameEngine.on('postStep', this.stepLogic.bind(this));\r\n        this.gameEngine.on('shoot', this.shoot.bind(this));\r\n    }\r\n\r\n    // create food and AI robots\r\n    start() {\r\n        super.start();\r\n        for (let f = 0; f < this.gameEngine.foodCount; f++) {\r\n            let newF = new Food(this.gameEngine, null, { position: this.gameEngine.randPos() });\r\n            this.gameEngine.addObjectToWorld(newF);\r\n        }\r\n        // for (let ai = 0; ai < this.gameEngine.aiCount; ai++)\r\n        //     this.addAI();\r\n    }\r\n\r\n    addAI() {\r\n        // let newAI = new Wiggle(this.gameEngine, null, { position: this.gameEngine.randPos() });\r\n        // newAI.AI = true;\r\n        // newAI.direction = 0;\r\n        // newAI.turnDirection = 1;\r\n        // newAI.bodyLength = this.gameEngine.startBodyLength;\r\n        // newAI.playerId = 0;\r\n        // this.gameEngine.addObjectToWorld(newAI);\r\n    }\r\n\r\n    onPlayerConnected(socket) {\r\n        super.onPlayerConnected(socket);\r\n        let player = new Wiggle(this.gameEngine, null, { position: this.gameEngine.randPos() });\r\n        player.direction = 0;\r\n        player.bodyLength = this.gameEngine.startBodyLength;\r\n        player.playerId = socket.playerId;\r\n        this.gameEngine.addObjectToWorld(player);\r\n    }\r\n\r\n    onPlayerDisconnected(socketId, playerId) {\r\n        super.onPlayerDisconnected(socketId, playerId);\r\n        let playerWiggle = this.gameEngine.world.queryObject({ playerId });\r\n        if (playerWiggle) this.gameEngine.removeObjectFromWorld(playerWiggle.id);\r\n    }\r\n\r\n    // Eating Food:\r\n    // increase body length, and remove the food\r\n    wiggleEatFood(w, f) {\r\n        if (!(f.id in this.gameEngine.world.objects))\r\n            return;\r\n\r\n        w.bodyLength++;\r\n        this.gameEngine.removeObjectFromWorld(f);\r\n        let newF = new Food(this.gameEngine, null, { position: this.gameEngine.randPos() });\r\n        this.gameEngine.addObjectToWorld(newF);\r\n    }\r\n\r\n    wiggleHitWiggle(w1, w2) {\r\n        if (!(w2.id in this.gameEngine.world.objects) || !(w1.id in this.gameEngine.world.objects))\r\n            return;\r\n\r\n        this.gameEngine.removeObjectFromWorld(w1);\r\n        if (w1.AI) this.addAI();\r\n    }\r\n\r\n    shoot(player) {\r\n        let bullet = new Bullet(this.gameEngine, null, { \r\n            direction: player.direction,\r\n            position: player.position.clone(),\r\n            velocity: new TwoVector(\r\n                Math.cos(player.direction) * .15 ,\r\n                Math.sin(player.direction) * .15\r\n            )\r\n        });\r\n        this.gameEngine.addObjectToWorld(bullet);\r\n     \r\n    \r\n        // let wiggle = new Wiggle(this.gameEngine, {}, {\r\n        //     mass: 0.05,\r\n        //     position: new TwoVector(\r\n        //         radius * Math.cos(angle) + player.physicsObj.position[0],\r\n        //         radius * Math.sin(angle) + player.physicsObj.position[1]\r\n        //     ),\r\n        //     velocity: new TwoVector(\r\n        //         2 * Math.cos(angle) + player.physicsObj.velocity[0],\r\n        //         2 * Math.sin(angle) + player.physicsObj.velocity[1]\r\n        //     ),\r\n        //     angularVelocity: 0\r\n        // });\r\n        // let obj = this.gameEngine.addObjectToWorld(bullet);\r\n        // this.gameEngine.timer.add(this.gameEngine.bulletLifeTime, this.destroyBullet, this, [obj.id]);\r\n    }\r\n\r\n    stepLogic() {\r\n        let wiggles = this.gameEngine.world.queryObjects({ instanceType: Wiggle });\r\n        let foodObjects = this.gameEngine.world.queryObjects({ instanceType: Food });\r\n        for (let w of wiggles) {\r\n            // check for collision\r\n            for (let w2 of wiggles) {\r\n                if (w === w2)\r\n                    continue;\r\n\r\n                for (let i = 0; i < w2.bodyParts.length; i++) {\r\n                    let distance = w2.bodyParts[i].clone().subtract(w.position);\r\n                    if (distance.length() < this.gameEngine.collideDistance)\r\n                        this.wiggleHitWiggle(w, w2);\r\n                }\r\n            }\r\n\r\n            // // check for food-eating\r\n            // for (let f of foodObjects) {\r\n            //     let distance = w.position.clone().subtract(f.position);\r\n            //     if (distance.length() < this.gameEngine.eatDistance) {\r\n            //         this.wiggleEatFood(w, f);\r\n            //     }\r\n            // }\r\n\r\n            // move AI wiggles\r\n            if (w.AI) {\r\n                // if (Math.random() < 0.01) w.turnDirection *= -1;\r\n                // w.direction += w.turnDirection * (Math.random() - 0.9)/20;\r\n                // if (w.position.y >= this.gameEngine.spaceHeight / 2) w.direction = -Math.PI/2;\r\n                // if (w.position.y <= -this.gameEngine.spaceHeight / 2) w.direction = Math.PI/2;\r\n                // if (w.position.x >= this.gameEngine.spaceWidth / 2) w.direction = Math.PI;\r\n                // if (w.position.x <= -this.gameEngine.spaceWidth / 2) w.direction = 0;\r\n                // if (w.direction > Math.PI * 2) w.direction -= Math.PI * 2;\r\n                // if (w.direction < 0) w.direction += Math.PI * 2;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"file":"WiggleServerEngine.js"}