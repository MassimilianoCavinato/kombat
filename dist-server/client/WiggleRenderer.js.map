{"version":3,"sources":["../../src/client/WiggleRenderer.js"],"names":["ctx","canvas","game","c","WiggleRenderer","gameEngine","clientEngine","document","createElement","width","window","innerWidth","height","innerHeight","body","insertBefore","getElementById","w","h","zoom","spaceHeight","spaceWidth","getContext","lineWidth","strokeStyle","fillStyle","t","dt","clearRect","save","translate","scale","world","forEachObject","id","obj","Wiggle","drawWiggle","Bullet","drawCircle","position","x","y","Food","drawFood","restore","zeroTo240","Math","floor","cos","isPlayer","playerId","rainbowColors","headRadius","i","bodyParts","length","nextPos","bodyRadius","angle","direction","directionStop","PI","eye1","TwoVector","eyeAngle","sin","eye2","multiplyScalar","eyeDist","add","eyeRadius","innerHTML","f","foodRadius","radius","fill","beginPath","arc","stroke","closePath","moveTo","lineTo","Renderer"],"mappings":"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","sourcesContent":["import { Renderer, TwoVector } from 'lance-gg';\r\nimport Wiggle from '../common/Wiggle';\r\nimport Food from '../common/Food';\r\nimport Bullet from '../common/Bullet';\r\nlet ctx = null;\r\nlet canvas = null;\r\nlet game = null;\r\nlet c = 0;\r\n\r\nexport default class WiggleRenderer extends Renderer {\r\n\r\n    constructor(gameEngine, clientEngine) {\r\n        super(gameEngine, clientEngine);\r\n        game = gameEngine;\r\n        canvas = document.createElement('canvas');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        document.body.insertBefore(canvas, document.getElementById('logo'));\r\n        game.w = canvas.width;\r\n        game.h = canvas.height;\r\n        clientEngine.zoom = game.h / game.spaceHeight;\r\n        if (game.w / game.spaceWidth < clientEngine.zoom) clientEngine.zoom = game.w / game.spaceWidth;\r\n        ctx = canvas.getContext('2d');\r\n        ctx.lineWidth = 2 / clientEngine.zoom;\r\n        ctx.strokeStyle = ctx.fillStyle = 'white';\r\n    }\r\n\r\n    draw(t, dt) {\r\n        super.draw(t, dt);\r\n\r\n        // Clear the canvas\r\n        ctx.clearRect(0, 0, game.w, game.h);\r\n\r\n        // Transform the canvas\r\n        // Note that we need to flip the y axis since Canvas pixel coordinates\r\n        // goes from top to bottom, while physics does the opposite.\r\n        ctx.save();\r\n        ctx.translate(game.w/2, game.h/2); // Translate to the center\r\n        ctx.scale(this.clientEngine.zoom, this.clientEngine.zoom);  // Zoom in and flip y axis\r\n\r\n        // Draw all things\r\n        game.world.forEachObject((id, obj) => {\r\n            if (obj instanceof Wiggle) this.drawWiggle(obj);\r\n            else if (obj instanceof Bullet) this.drawCircle(obj.position.x, obj.position.y, .1);\r\n            else if (obj instanceof Food) this.drawFood(obj);\r\n        });\r\n\r\n        ctx.restore();\r\n\r\n    }\r\n\r\n    rainbowColors() {\r\n        c += 0.005;\r\n        let zeroTo240 = Math.floor((Math.cos(c) + 1) * 120);\r\n        return `rgb(${zeroTo240},100,200)`;\r\n    }\r\n\r\n    drawWiggle(w) {\r\n\r\n        // draw head and body\r\n        let isPlayer = w.playerId === this.gameEngine.playerId;\r\n        let x = w.position.x;\r\n        let y = w.position.y;\r\n        if (isPlayer) ctx.fillStyle = this.rainbowColors();\r\n        this.drawCircle(x, y, game.headRadius, true);\r\n        for (let i = 0; i < w.bodyParts.length; i++) {\r\n            let nextPos = w.bodyParts[i];\r\n            if (isPlayer) ctx.fillStyle = this.rainbowColors();\r\n            this.drawCircle(nextPos.x, nextPos.y, game.bodyRadius, true);\r\n        }\r\n\r\n        // draw eyes\r\n        let angle = +w.direction;\r\n        if (w.direction === game.directionStop) {\r\n            angle = - Math.PI / 2;\r\n        }\r\n        let eye1 = new TwoVector(Math.cos(angle + game.eyeAngle), Math.sin(angle + game.eyeAngle));\r\n        let eye2 = new TwoVector(Math.cos(angle - game.eyeAngle), Math.sin(angle - game.eyeAngle));\r\n        eye1.multiplyScalar(game.eyeDist).add(w.position);\r\n        eye2.multiplyScalar(game.eyeDist).add(w.position);\r\n        ctx.fillStyle = 'black';\r\n        this.drawCircle(eye1.x, eye1.y, game.eyeRadius, true);\r\n        this.drawCircle(eye2.x, eye2.y, game.eyeRadius, true);\r\n        ctx.fillStyle = 'white';\r\n\r\n        // update status\r\n        if (isPlayer) {\r\n            document.getElementById('wiggle-length').innerHTML = 'Wiggle Length: ' + w.bodyParts.length;\r\n        }\r\n    }\r\n\r\n    drawFood(f) {\r\n        ctx.strokeStyle = ctx.fillStyle = 'Orange';\r\n        this.drawCircle(f.position.x, f.position.y, game.foodRadius, true);\r\n        ctx.strokeStyle = ctx.fillStyle = 'White';\r\n    }\r\n\r\n    drawCircle(x, y, radius, fill) {\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, radius, 0, 2*Math.PI);\r\n        fill?ctx.fill():ctx.stroke();\r\n        ctx.closePath();\r\n    }\r\n\r\n    drawBounds() {\r\n        ctx.beginPath();\r\n        ctx.moveTo(-game.spaceWidth/2, -game.spaceHeight/2);\r\n        ctx.lineTo(-game.spaceWidth/2, game.spaceHeight/2);\r\n        ctx.lineTo( game.spaceWidth/2, game.spaceHeight/2);\r\n        ctx.lineTo( game.spaceWidth/2, -game.spaceHeight/2);\r\n        ctx.lineTo(-game.spaceWidth/2, -game.spaceHeight/2);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n\r\n}\r\n"],"file":"WiggleRenderer.js"}