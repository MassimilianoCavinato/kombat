{"version":3,"sources":["../../src/common/KombatGameEngine.js"],"names":["KombatGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","autoResolve","on","stepInfo","postStep","e","handleCollision","Object","assign","foodRadius","headRadius","bodyRadius","eyeDist","eyeRadius","eyeAngle","spaceWidth","spaceHeight","moveDist","foodCount","eatDistance","startBodyLength","aiCount","directionStop","collideDistance","serializer","registerClass","Kombat","Bullet","Granade","Wall","Blood","Explosion2","x","Math","random","y","TwoVector","inputData","playerId","player","world","queryObject","speed","input","right","left","up","down","velocity","move_angle","atan2","cos","sin","direction","angle","step","last_shot","emit","throwing_granade","throw_power","o1","o2","handleBulletHit","destroyObjectById","id","kombat","bullet","health","blood","position","clone","addObjectToWorld","timer","add","objects","removeObjectFromWorld","kombats","queryObjects","instanceType","forEach","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Kombat from './Kombat';\nimport Wall from './Wall';\nimport Bullet from './Bullet';\nimport Granade from './Granade';\nimport Blood from './Blood';\nimport Explosion2 from './Explosion2';\n\nexport default class KombatGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({\n            gameEngine: this,\n            collisions: {\n                autoResolve: true,\n            }\n        });\n     \n        this.on('postStep', (stepInfo) => this.postStep(stepInfo));\n        this.on('collisionStart', (e) => this.handleCollision(e));\n\n        // game variables\n        Object.assign(this, {\n            foodRadius: 0.1, \n            headRadius: 0.25, \n            bodyRadius: 0.1,\n            eyeDist: 0.08, \n            eyeRadius: 0.03, \n            eyeAngle: 0.5,\n            spaceWidth: 16, \n            spaceHeight: 9,\n            moveDist: 0.06,\n            foodCount: 16, \n            eatDistance: 0.3, \n            startBodyLength: 10, \n            aiCount: 3, \n            directionStop: 100,\n            collideDistance: 1\n        });\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Kombat);\n        serializer.registerClass(Bullet);\n        serializer.registerClass(Granade);\n        serializer.registerClass(Wall);\n        serializer.registerClass(Blood);\n        serializer.registerClass(Explosion2);\n    }\n\n    start() {\n        super.start();\n    }\n\n    randPos() {\n        let x = (Math.random() - 0.5) * this.spaceWidth;\n        let y = (Math.random() - 0.5) * this.spaceHeight;\n        return new TwoVector(x, y);\n    }\n\n    processInput(inputData, playerId) {\n        super.processInput(inputData, playerId);\n        let player = this.world.queryObject({ playerId });\n        let speed = 0.24;\n        if (player) {\n            if (inputData.input === 'step') {\n                let x = 0;\n                let y = 0;\n                if(inputData.options.right){\n                    x++;\n                }\n                if(inputData.options.left){\n                    x--;\n                }\n                if(inputData.options.up){\n                    y--;\n                }\n                if(inputData.options.down){\n                    y++;\n                }\n                if(x == 0 && y === 0){\n                    player.velocity.x = 0;\n                    player.velocity.y = 0;\n                }\n                else{\n                    let move_angle = Math.atan2(y, x);\n                    player.velocity.x = speed * Math.cos(move_angle);\n                    player.velocity.y = speed * Math.sin(move_angle);\n                }\n                \n                player.direction =  inputData.options.angle;\n            }\n            else if (inputData.input === 'shoot'){\n                let step = inputData.step;\n                if(step  >= player.last_shot + 15){\n                    player.last_shot = step;\n                    this.emit('shoot', player);\n                }\n                \n            }\n            else if (inputData.input === 'throw_power'){\n                player.throwing_granade = 1;\n                player.throw_power = .015;\n            }\n            else if (inputData.input === 'granade'){\n                player.throwing_granade = 0;\n                this.emit('granade', player);\n            }\n        }\n    }\n\n    handleCollision(e){\n        if(e.o1 instanceof Kombat){\n            if(e.o2 instanceof Bullet){\n                this.handleBulletHit(e.o1, e.o2)\n            }\n        }\n        else if(e.o1 instanceof Bullet){\n            if(e.o2 instanceof Kombat){\n                this.handleBulletHit(e.o2, e.o1)\n            }\n            else if( e.o2 instanceof Wall){\n                this.destroyObjectById(e.o1.id);\n            }\n        }\n        else if(e.o1 instanceof Wall){\n            if(e.o2 instanceof Bullet){\n                this.destroyObjectById(e.o2.id);\n            }\n        }\n    }\n\n    handleBulletHit(kombat, bullet){\n        this.destroyObjectById(bullet.id);\n        kombat.health--;\n        let blood = new Blood(this, null, { position: kombat.position.clone() });\n        this.addObjectToWorld(blood);\n        this.timer.add(600, this.destroyObjectById, this, [blood.id]);\n        if(kombat.health <= 0){\n            this.destroyObjectById(kombat.id);\n        }\n    }\n\n    destroyObjectById(id){\n        if (this.world.objects[id]) {\n            this.removeObjectFromWorld(id);\n        }   \n    }\n\n    postStep(stepInfo){\n        let kombats = this.world.queryObjects({ instanceType : Kombat });\n        kombats.forEach(kombat => {\n            if(kombat.throw_power > 0){\n                kombat.throw_power += .015\n                if(kombat.throw_power  > 1){\n                    kombat.throw_power = 1\n                }\n            }\n        });\n    }\n}"],"file":"KombatGameEngine.js"}