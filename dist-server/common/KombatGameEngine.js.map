{"version":3,"sources":["../../src/common/KombatGameEngine.js"],"names":["KombatGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","autoResolve","on","stepInfo","preStep","postStep","e","handleCollision","console","log","serializer","registerClass","Kombat","Bullet","Granade","Wall","Blood","Explosion2","DeadZone","Heal2","x","Math","random","spaceWidth","y","spaceHeight","TwoVector","inputData","playerId","player","world","queryObject","step","input","timer_shot","emit","granade_loaded","throwing_granade","throw_power","ammo_loaded","ammo_capacity","speed","right","left","up","down","velocity","move_angle","atan2","cos","sin","direction","angle","name","o1","o2","destroyObjectById","id","objects","removeObjectFromWorld","kombats","queryObjects","instanceType","forEach","kombat","deadZone","radius","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Kombat from './Kombat';\nimport Wall from './Wall';\nimport Bullet from './Bullet';\nimport Granade from './Granade';\nimport Blood from './Blood';\nimport Explosion2 from './Explosion2';\nimport DeadZone from './DeadZone';\nimport Heal2 from './Heal2';\n\nexport default class KombatGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({\n            gameEngine: this,\n            collisions: {\n                autoResolve: true,\n            }\n        });\n        this.on('preStep', (stepInfo) => this.preStep(stepInfo));\n        this.on('postStep', (stepInfo) => this.postStep(stepInfo));\n        this.on('collisionStart', (e) => this.handleCollision(e));\n        this.on('client__slowFrameRate', (e) => console.log('lag', e))\n\n\n        // game variables\n        // Object.assign(this, {\n        //     foodRadius: 0.1, \n        //     headRadius: 0.25, \n        //     bodyRadius: 0.1,\n        //     eyeDist: 0.08, \n        //     eyeRadius: 0.03, \n        //     eyeAngle: 0.5,\n        //     spaceWidth: 16, \n        //     spaceHeight: 9,\n        //     moveDist: 0.06,\n        //     foodCount: 16, \n        //     eatDistance: 0.3, \n        //     startBodyLength: 10, \n        //     aiCount: 3, \n        //     directionStop: 100,\n        //     collideDistance: 1\n        // });\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Kombat);\n        serializer.registerClass(Bullet);\n        serializer.registerClass(Granade);\n        serializer.registerClass(Wall);\n        serializer.registerClass(Blood);\n        serializer.registerClass(Explosion2);\n        serializer.registerClass(DeadZone);\n        serializer.registerClass(Heal2);\n    }\n\n    start() {\n        super.start();\n    }\n\n    randPos() {\n        let x = (Math.random() - 0.5) * this.spaceWidth;\n        let y = (Math.random() - 0.5) * this.spaceHeight;\n        return new TwoVector(x, y);\n    }\n\n    processInput(inputData, playerId) {\n        super.processInput(inputData, playerId);\n        let player = this.world.queryObject({ playerId });\n        \n        if (player) {\n            let step = inputData.step;\n            if (inputData.input === 'shoot'){\n                if(step  >= player.timer_shot + 10){\n                    player.timer_shot = step;\n                    this.emit('shoot', player);\n                }\n            }\n            else if (inputData.input === 'throw_power'){\n                if(player.granade_loaded > 0){\n                    player.throwing_granade = 1;\n                    player.throw_power = .03;\n                }\n            }\n            else if (inputData.input === 'granade'){\n                player.throwing_granade = 0;\n                this.emit('granade', player);\n            }\n            else if (inputData.input === \"reload\"){\n                if(player.ammo_loaded < player.ammo_capacity && player.ammo_loaded >= 0){\n                    player.ammo_loaded = 0;\n                    this.emit('shoot', player);\n                }\n            }\n            else if (inputData.input === \"pickup\"){\n                this.emit('pickup', player);\n            }\n            else if(inputData.input === 'step') {\n\n                let speed;\n                let x = 0;\n                let y = 0;\n\n                if( player.throwing_granade === 1 ){\n                    speed = 0.16;\n                }\n                else if( step  <= player.timer_shot + 15 ){\n                    speed = 0.21;\n                }\n                else{\n                    speed = 0.24;\n                }\n\n                if(inputData.options.right){\n                    x++;\n                }\n                if(inputData.options.left){\n                    x--;\n                }\n                if(inputData.options.up){\n                    y--;\n                }\n                if(inputData.options.down){\n                    y++;\n                }\n                if(x == 0 && y === 0){\n                    player.velocity.x = 0;\n                    player.velocity.y = 0;\n                }\n                else{\n                    let move_angle = Math.atan2(y, x);\n                    player.velocity.x = speed * Math.cos(move_angle);\n                    player.velocity.y = speed * Math.sin(move_angle);\n                }\n                \n                player.direction =  inputData.options.angle;\n            }\n        }\n        else{\n            if (inputData.input === 'play'){\n                this.emit('play', { playerId: inputData.options.playerId, name: inputData.options.name });\n            }\n        }\n    }\n\n    handleCollision(e){\n        if(e.o1 instanceof Kombat){\n            if(e.o2 instanceof Bullet){\n                this.emit('bullethit', e.o1);\n                this.destroyObjectById(e.o2.id);\n            }\n        }\n        else if(e.o1 instanceof Bullet){\n            this.destroyObjectById(e.o1.id);\n            if(e.o2 instanceof Kombat){\n                this.emit('bullethit', e.o2);\n            }\n        }\n        else if(e.o1 instanceof Wall){\n            if(e.o2 instanceof Bullet){\n                this.destroyObjectById(e.o2.id);\n            }\n        }\n    }\n\n    destroyObjectById(id){\n        if (this.world.objects[id]) {\n            this.removeObjectFromWorld(id);\n        }   \n    }\n\n    preStep(stepInfo){\n        let kombats = this.world.queryObjects({ instanceType : Kombat });\n        kombats.forEach(kombat => {\n            if(kombat.throw_power > 0){\n                kombat.throw_power += .015\n                if(kombat.throw_power  > 1){\n                    kombat.throw_power = 1;\n                }\n            }\n        });\n    }\n\n    postStep(stepInfo){\n        let deadZone = this.world.queryObject({ instanceType : DeadZone });\n        if(deadZone){\n            deadZone.radius -= .03;\n        }\n\n    }\n}"],"file":"KombatGameEngine.js"}